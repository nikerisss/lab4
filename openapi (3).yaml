openapi: 3.0.1
info:
  title: Swagger Car Service
  description: 'This is a server Car Service.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key special-key to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  
  
tags:

    
- name: user
  description: Everything about your users
  externalDocs:
    description: Find out more
    url: http://swagger.io
    
- name: car
  description: Everything about your cars
  externalDocs:
    description: Find out more
    url: http://swagger.io
    
- name: order
  description: Everything about your orders
  externalDocs:
    description: Find out more
    url: http://swagger.io

paths:

  /user:
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid username supplied
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - write:orders
      x-codegen-request-body-name: body

      
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user username for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username/password supplied
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by username
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'Username of user who needs to be found'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - read:orders
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: 'Username of user who needs to be updated'
        required: true
        schema:
          type: string
      requestBody:
        description: Updated admin object
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUser'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid admin supplied
          content: {}
        404:
          description: User not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - edit:orders
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: 'Username of user who needs to be deleted'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - delete:cars
          
  /car:
    post:
      tags:
      - car
      summary: Create car
      operationId: createCar
      requestBody:
        description: Created car object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCar'
        required: true
      responses:
        200:
          description: successful operation
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
      security:
      - admin_auth:
        - write:cars

  /car/{id}:
    get:
      tags:
      - car
      summary: Get car by id
      operationId: getCarById
      parameters:
      - name: id
        in: path
        description: 'Id of car which needs to be found'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          description: Invalid car id supplied
          content: {}
        404:
          description: Car not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
          
    put:
      tags:
      - car
      summary: Updated car
      description: This can only be done by the logged in admin.
      operationId: updateCar
      parameters:
      - name: id
        in: path
        description: 'Id of car which needs to be updated'
        required: true
        schema:
          type: string
      requestBody:
        description: Updated car object
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCar'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          description: Invalid car id supplied
          content: {}
        404:
          description: Car not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - admin_auth:
        - edit:cars
      x-codegen-request-body-name: body
    delete:
      tags:
      - car
      summary: Delete car
      description: This can only be done by the logged in admin.
      operationId: deleteCar
      parameters:
      - name: id
        in: path
        description: 'Id of car which needs to be deleted'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid car id supplied
          content: {}
        404:
          description: Car not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - admin_auth:
        - delete:cars
          
  /order:
    post:
      tags:
      - order
      summary: Create order
      operationId: createOrder
      requestBody:
        description: Created order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrder'
        required: true
      responses:
        200:
          description: successful operation
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - write:orders
      x-codegen-request-body-name: body
  /order/{orderId}:
    get:
      tags:
      - order
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - read:orders
          
    put:
      tags:
      - order
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: updateOrderById
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Updated car object
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/createOrder'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - edit:orders
    
    delete:
      tags:
      - order
      summary: Delete order
      description: This can only be done by the logged in admin.
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: 'Id of order that needs to be deleted'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid order id supplied
          content: {}
        404:
          description: Order not found
          content: {}
        500:
          description: Internal Server Error
          content: {}
      security:
      - user_auth:
        - delete:cars

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        carId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        duration:
          type: string
          format: date-time
        endDate:          
          type: string
          format: date-time
        cost:
          type: integer
          format: int64
        
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          - in use
          - returned
        complete:
          type: boolean
          default: false
      xml:
        name: Order
        
    createOrder:
      type: object
      properties:
        carId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        duration:
          type: string
          format: date-time
        endDate:          
          type: string
          format: date-time
        cost:
          type: integer
          format: int64
        
      xml:
        name: Order
        
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          description: Order Status
          enum:
          - admin
          - user
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
        
    createUser:
      type: object
      properties:
        status:
          type: string
          description: Order Status
          enum:
          - admin
          - user
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: createUser

        
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
        model:
          type: string
        make:
          type: string
        color:
          type: string
        transmition:
          type: string
        costPerHour:
          type: integer
          format: int64
      xml:
        name: Car
        
    createCar:
      type: object
      properties:
        model:
          type: string
        make:
          type: string
        color:
          type: string
        transmition:
          type: string
        costPerHour:
          type: integer
          format: int64
      xml:
        name: createCar
        


  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://user.swagger.io/oauth/dialog
          scopes:
            write:orders: create orders in your account
            edit:orders: modifyorders
            read:orders: read your orders
            delete:orders: delete orders
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://admin.swagger.io/oauth/dialog
          scopes:
            write:cars: create cars
            edit:cars: modify cars
            delete:cars: delete cars

    api_key:
      type: apiKey
      name: api_key
      in: header
      
